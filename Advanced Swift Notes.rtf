{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-BoldOblique;
\f3\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c85098;\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid27}
{\list\listtemplateid28\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid28}
{\list\listtemplateid29\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid29}
{\list\listtemplateid30\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid30}
{\list\listtemplateid31\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3002\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid31}
{\list\listtemplateid32\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid32}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}{\listoverride\listid28\listoverridecount0\ls28}{\listoverride\listid29\listoverridecount0\ls29}{\listoverride\listid30\listoverridecount0\ls30}{\listoverride\listid31\listoverridecount0\ls31}{\listoverride\listid32\listoverridecount0\ls32}}
\margl1440\margr1440\vieww19560\viewh15540\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Coding Guidelines
\f1\b0\fs28 \
Be familiar with:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}Apple's API design guide recommendations: {\field{\*\fldinst{HYPERLINK "https://swift.org/documentation/api-design-guidelines/"}}{\fldrslt https://swift.org/documentation/api-design-guidelines/}}\
{\listtext	\uc0\u8226 	}Ray Wenderlich's style guide: {\field{\*\fldinst{HYPERLINK "https://www.raywenderlich.com/809-swift-style-guide-updated-for-swift-3"}}{\fldrslt https://www.raywenderlich.com/809-swift-style-guide-updated-for-swift-3}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Swift Language Features That Should be Avoided
\f1\b0\fs28 \
The community is rapidly converging on using the functional programming aspects of Swift and deprecating the imperative programming parts.  These features remain in the language of course, but are being used more and more sparingly if at all by those familiar with best practices in Swift app development.  So, surprisingly to those familiar only with the imperative style, you should 
\f2\i\b avoid
\f1\i0\b0  the following features of Swift: \

\f0\b NEVER USE
\f1\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f0\b for-loops
\f1\b0  (use Sequence higher-order methods instead), \
{\listtext	\uc0\u8226 	}
\f0\b while-loops outside of RunLoops
\f1\b0  (in functional reactive systems, there is a while at the top of a RunLoop and all code below that reacts and returns results)\
{\listtext	\uc0\u8226 	}
\f0\b inheritance
\f1\b0  (replace with a mix of generic wrappers and protocol witnesses as appropriate),\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 NEVER USE OUTSIDE OF MIXED IMPERATIVE/FUNCTIONAL CODEBASES
\f1\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f0\b functions that return Void
\f1\b0 .  Void-returning functions, by construction can only be used to accomplish side-effects. The type system has specific capabilities to handle side-effects in more efficient functional ways, so these should be avoided. (e.g. if you return Void because you are dispatching an asynchronous operation, you should look at Combine or SwiftNIO and return a Future instead, if you are returning Void from a setter, you should consider the functional alternatives that allow chained application). \
{\listtext	\uc0\u8226 	}
\f0\b PassthruSubject from Combine. 
\f1\b0 In a functional codebase this is not needed.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 USE ONLY WITH CAREFUL CONSIDERATION
\f1\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f0\b protocols unless you are absolutely sure that there is only way for each conforming concrete type to implement the protocol
\f1\b0 . Most application-level declarations of protocols do not meet this test and should use protocol witness structs instead. (you can thank me later). So, for example, Hashable and Equatable should be implemented only one way for any given type and are therefore good subjects for protocols.  \cf2 \cb3 \expnd0\expndtw0\kerning0
CustomDebugStringConvertible frequently can be implemented multiple ways for a given type and in those circumstances should be managed with a protocol witness rather than a conformance.  Think about this when you go to create a protocol type.\cf0 \cb1 \kerning1\expnd0\expndtw0 \
{\listtext	\uc0\u8226 	}
\f0\b PATs
\f1\b0  (Protocols with Associated Types) should be reserved as a feature for people writing advanced libraries.  They introduce a world of hurt except for very specific cases where the programmer truly understands the interactions of the various concrete types being designed. The only exception to this may protocols which have an associatedtype of Self only.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 ASPIRE NOT TO USE
\f1\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f0\b if and if-else
\f1\b0  statements (prefer the use of ternary conditionals that return values instead),\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Note that some of the points above are not iron-clad rules but others are. For-loops and inheritance are never needed.  Void-returning functions and PATs are appropriate in some specific but infrequent situations. Ternaries over if's and protocols witnesses are aspirations.  However, all uses of the above should be carefully considered before they are employed in code.\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf0 \expnd0\expndtw0\kerning0
The Functional Style vs Object-Oriented Style
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 A critical thing to remember is that Swift encourages the use of functional decomposition rather than procedural decomposition. Functions under procedural decomposition (OOP techniques are an exemplar) are groupings of executable steps which don't strictly depend on each other, or rather, depend on each other in ways that are hard to reason about.  Under functional decomposition, an entire program is a function which accepts inputs and returns values.   \
\
Decomposing applications functionally introduces a chain of functions and these functions have strict interdependence dictated by the type system.  In fact, the single most important feature of functional decomposition is its strict use of the type system.  You will find time and time again, that if you really understand the type signature of a well-designed function, the implementation becomes almost an after thought.\
\
It is critical to understand that in Swift, the OO style is simply a notational convenience that has been given some facilitating syntax and that what we think of as methods on a class are actually static functions which are assigned to a namespace.  This cannot be stressed enough: OOP is a notational style that can facilitate human intuition, it is 
\f3\i not
\f1\i0  an inherent aspect of good programming practice or a way of life. Swift accommodates the notation easily, but to insist on using it in all cases throws away a lot of other powerful constructs in the language.  Don't be close-minded on this if you want to really be able to use the language.\
\
The functional reactive programming (FRP) style as embodied in Combine takes functional decomposition to a higher level.  Under FRP you should think of your application as being a collection of functions which are nested in an event loop - in GUI apps that's typically the event loop of the main thread.  When an event enters the event loop, a function is selected to dispatch the event into, and that function is called by passing in 
\f3\i 1) the current state of the application AND 2) the new event and returning a new state of the application
\f1\i0 . In this model, ApplicationState is an immutable value type\
\
(Technically speaking there are a couple of layers between the entry of the event and function dispatch under SwiftUI or SwiftNIO, but from a conceptual standpoint, this is the correct idealized model.  Also technically the ApplicationState can be mutable if sufficient thought and care are given to managing mutation.)\
\
That last point is the crux of all application development in SwiftUI.  Long-running applications should be organized as collections of functions of the form: 
\f3\i (ApplicationState, Event)->ApplicationState
\f1\i0 .  In functional programming terms, functions with this signature are called reducers. Your application should decompose this function into a chain of function invocations mediated by the type system. If you are working with a mutable ApplicationState, this signature is 
\f3\i (&ApplicationState, Event)->Void.
\f1\i0  The completely equivalent form of this latter function in OO notation is: 
\f3\i applicationState.handle(anEvent)->Void
\f1\i0  where the applicationState is mutated by the event handling method call.  \
\
The unconstrained creation of side-effects arising from the introduction of mutation by the OOP style is a critical difference between the two approaches. Chaining on the return type of Void means that the type system cannot help you reason about the handling of an event or manage side-effects.  Allowing the type system to help is 
\f3\i the 
\f1\i0 main appeal of the FRP style and properly done can greatly improve programmer productivity.\
\pard\pardeftab720\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 The Type System
\f1\b0\fs28 \
Noting the above, you should make sure that you fully understand the type system which is composed of: tuples, functions, structs, enums, classes, and protocols PLUS generics of the first 5 things in that list (Protocols and generics interact in very weird ways). If you are coming from an OO background it is my experience that you are likely to think the following things when you pick up Swift: \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\uc0\u8226 	}Classes and protocols look quite familiar to what you are accustomed to in Java or ObjC\
{\listtext	\uc0\u8226 	}Structs seem like classes with several useless limitations \
{\listtext	\uc0\u8226 	}Functions appear to be just like methods\
{\listtext	\uc0\u8226 	}Generics seem a bit superfluous and \
{\listtext	\uc0\u8226 	}Enums and tuples look like trivial extensions from C \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Every one of these perceptions is mistaken in some fundamental way. \
\
You will want to:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\uc0\u8226 	}Make sure you understand tuple syntax and in particular, that tuples can be broken apart into their constituent pieces - a feature called "destructuring"\
{\listtext	\uc0\u8226 	}Make sure that you thoroughly understand the following about functions:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1\cf0 {\listtext	\uc0\u8259 	}Each function takes exactly only one argument - and contrary to appearances that argument is a tuple\
{\listtext	\uc0\u8259 	}You can separate any function call which accepts a multi-valued tuple such as (X, Y, Z) -> A into a chain of function calls (X) -> (Y) -> (Z) -> A where the original function's input tuple is destructured and all of the calls until the last one simply bind the value passed in and return a function which takes the next type. This process is called currying.\
{\listtext	\uc0\u8259 	}You can reverse this via a process called uncurrying.\
{\listtext	\uc0\u8259 	}Anytime you see a signature of a function which is curried and which has no side-effects, you can apply a function which can flip the order of any of the arguments without effecting the final result.  This should be as intuitive as changing the order of arguments on any multi-valued function call. \
{\listtext	\uc0\u8259 	}
\f3\i flip
\f1\i0 ping a function's arguments to designate one of the function's arguments as THE object being operated on is the entire basis of OOP.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\uc0\u8226 	}Understand the following about functions associated with enums, structs and classes:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1\cf0 {\listtext	\uc0\u8259 	}each function you think of as an "instance method" on a type A, taking arguments such as X, Y, and Z and returning B is actually just a static function of the form: (A) -> (X,Y,Z) -> B\
{\listtext	\uc0\u8259 	}each initializer on a type A is just a static function with the name init, taking a tuple value and returning a value of type A\
{\listtext	\uc0\u8259 	}each static function on A is just a regular function with the name "A." prepended to its name.\
{\listtext	\uc0\u8259 	}Combining the three previous points with the ability to manipulate function signatures via curry, uncurry and flip, it becomes clear that everything you might think of as object orientation is just a complicated form of name mangling and argument ordering of functions over datatypes.\
{\listtext	\uc0\u8259 	}An understanding of these points is required to make sense of lots of compositional techniques that the Swift community is increasingly adopting.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\uc0\u8226 	}Understand the tight relationship between Protocols and their implementation via generic witnesses.  This explains behavior that can frequently be surprising when using protocol extensions.\
{\listtext	\uc0\u8226 	}Understand how algebraic data types are built up in swift.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1\cf0 {\listtext	\uc0\u8259 	}Be aware that Void is actually a meaningful type in Swift, specifically it is the type inhabited by only one value.  Incredibly, this has meaning and makes sense of a lot of other things once you really grasp it.  \
{\listtext	\uc0\u8259 	}Understand that Void's syntax is interesting because `()` represents both the 
\f3\i type
\f1\i0  and the 
\f3\i value
\f1\i0  for Void and whether it is the type or value being referenced in any given situation is context-dependent.  \
{\listtext	\uc0\u8259 	}Understand that typealias'ing Void as a tuple has some downsides, since Void is an empty tuple it is not possible to define extensions on it.  You might want to consider emulating Haskell here and defining an equivalent struct called Unit which is the empty struct.  This has the advantage of being extensible.\
{\listtext	\uc0\u8259 	}Also be aware that Never is also actually a meaningful type in Swift, i.e. it is the type inhabited by NO values.  This also has meaning especially as a parameter to generic types.  \
{\listtext	\uc0\u8259 	}For reference, Never is defined as the empty enum. (Think about it)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	\uc0\u8226 	}When designing types, you should consider how to make any classes, structs or enums you create Equatable and Hashable.  You may not need it at first, but if it gets exposed to SwiftUI, you almost certainly will have to do this.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Understand when value types get copied and when they just get used.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Corollary to this make sure you understand how and when to use the mutating keyword (which is almost never)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Fundamentals of Functional Programming
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\uc0\u8226 	}Learn how to use the basic functional programming operations like pipe, curry, uncurry, flip, with, etc.\
{\listtext	\uc0\u8226 	}Understand why and where to curry your functions so that you don't break the function chain unnecessarily.\
{\listtext	\uc0\u8226 	}Make sure that any functions you write produce types which move the application's decomposition forward\
{\listtext	\uc0\u8226 	}Question the use of any functions which return Void, as mentioned above, because it 1) breaks the function invocation chain and 2) introduces side-effects \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}The most common case where this cannot be avoided (until you can use Combine or a similar package) is a function that acts asynchronously.  \
{\listtext	\uc0\u8259 	}The second most common case is setter methods.  \
{\listtext	\uc0\u8259 	}Almost any other returning Void case is incorrect.\
{\listtext	\uc0\u8259 	}NB that with Futures and Promises available from the Combine framework and SwiftNIO, the async case goes away.  \
{\listtext	\uc0\u8259 	}Setters are addressed through other pure functional techniques).\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\uc0\u8226 	}Anywhere you find a Void-returning function, look for the side-effect it produces and think about how to handle it appropriately by wrapping it in a returned generic.\
{\listtext	\uc0\u8226 	}Anywhere you find yourself using a function which takes no arguments, you should consider changing the function to be a computed var.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Structs and Classes
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\uc0\u8226 	}NEVER use inheritance in your own classes, it\'92s just not how things are done in Swift, and contrary to what you probably think, you don\'92t need it. \
{\listtext	\uc0\u8226 	}The polymorphism you seek with inheritance is actually available with other techniques. \
{\listtext	\uc0\u8226 	}If you think you need a class (and particularly some sort of subclass), almost certainly what you really need is a generic class that wraps the struct that you _really_ need as its generic type.\
{\listtext	\uc0\u8226 	}All classes should be marked as final and should accommodate mutating any wrapped values. \
{\listtext	\uc0\u8226 	}If you think you need inheritance, you definitely need a protocol witness and/or a generic wrapper of some sort. \
{\listtext	\uc0\u8226 	}Seriously, look at the Swift std library, at SwiftUI, at SwiftNIO, the new Swift Numerics and at Combine.  Classes are used only as reference types and inheritance is never used. And every class is marked final.\
{\listtext	\uc0\u8226 	}Property wrappers have been added to swift specifically to assist you in 
\f3\i not
\f1\i0  using inheritance. \
{\listtext	\uc0\u8226 	}Classes should be used only to provide a reference type to a struct. (It should be viewed as a shortcoming of the type system that enums don't have a similar "reference typability").\
{\listtext	\uc0\u8226 	}By the above, you should use structs wherever possible instead of classes.  This can\'92t always be helped, but it _usually_ can. \
{\listtext	\uc0\u8226 	}By default, properties of a struct should be let, not var.  always look to see if you can make something a let and set it at init time rather than just making it a var on the chance that you will want to update it. \
{\listtext	\uc0\u8226 	}If you find that you have created a class that only has let properties, it should almost certainly be a struct and not a class \
{\listtext	\uc0\u8226 	}Corollary to the use of structs by default: avoid the mutating keyword in structs where possible. \
{\listtext	\uc0\u8226 	}Immutability is actually a feature, not a bug. if you need mutability you need generic class wrapping the struct and you need an entirely new copy of the struct for each change. \
{\listtext	\uc0\u8226 	}If you must mutate try to do so in private methods.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\uc0\u8226 	}Corollary to all of the above you should always use static methods and not class methods on classes.  Since inheritance is deprecated, using a feature that only applies when overriding superclass behavior doesn't make sense, you want to avoid using constructs which require it unnecessarily.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Swift's relationship to ObjC 
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\uc0\u8226 	}Since you should never use inheritance, you should never derive from NSObject  In practice, the only time you would do this is if you derive from NSObject to fill a roll in a UIKit object, e.g. being a delegate of a UIKit class.  \
{\listtext	\uc0\u8226 	}This use will die away as applications migrate from UIKit to SwiftUI (which, however fast you think this might be, will probably be faster)\
{\listtext	\uc0\u8226 	}Deriving from NSObject breaks swift-specific functionality (like modules and static or table-driven function dispatch) that you don't really want to break.\
{\listtext	\uc0\u8226 	}You will want to make objects which derive from NSObject as small as possible and decompose the ones you do make into pieces which isolate UIKit functionality into an adaptor back into Swift.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Enums
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls14\ilvl0\cf0 {\listtext	\uc0\u8226 	}When creating enums, the strong temptation is to treat them similarly to NS_ENUM and use raw types like Int and String.  This is usually too inflexible as a design.  \
{\listtext	\uc0\u8226 	}Much more frequently than you think initially, you will want to use associated values in your enum. \
{\listtext	\uc0\u8226 	}You should think of enum as a C union type rather than a C enum type.  \
{\listtext	\uc0\u8226 	}Remember that tuples work very well as associated values for enums\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Protocols\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0
\f1\b0\fs28 \cf0 {\listtext	\uc0\u8226 	}Anywhere you think you need to create a delegate protocol, you almost certainly need to just use closures or maybe a protocol witness struct instead. \
{\listtext	\uc0\u8226 	}Protocols in swift are much more thoroughly part of the type system than they are in ObjC.  You should understand how they work with generics and protocol witnesses.  \
{\listtext	\uc0\u8226 	}You should understand the deeper implications of Protocol's use of associatedtype.  There are a ton of error messages you will never understand if you don't.\
{\listtext	\uc0\u8226 	}You should always ask yourself if there may be more than one way for a type to conform to a protocol.  If you can envision it at all, i.e. if the creation of the type is not simply to provide a specific concrete implementation of the protocol, then you should consider using a protocol witness rather than adding a conformance.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \
Sequences\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0
\f1\b0\fs28 \cf0 {\listtext	\uc0\u8226 	}Familiarize yourself with the use of ALL of the following functions on sequence:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}map\
{\listtext	\uc0\u8259 	}zip\
{\listtext	\uc0\u8259 	}flatMap\
{\listtext	\uc0\u8259 	}compactMap\
{\listtext	\uc0\u8259 	}forEach\
{\listtext	\uc0\u8259 	}lazy\
{\listtext	\uc0\u8259 	}reduce\
{\listtext	\uc0\u8259 	}first/first(where:)\
{\listtext	\uc0\u8259 	}contains(where:)\
{\listtext	\uc0\u8259 	}drop(while:), dropFirst(), dropLast()\
{\listtext	\uc0\u8259 	}enumerated\
{\listtext	\uc0\u8259 	}sorted(by:)\
{\listtext	\uc0\u8259 	}joined()\
{\listtext	\uc0\u8259 	}filter(where:)\
{\listtext	\uc0\u8259 	}shuffled\
{\listtext	\uc0\u8259 	}prefix/prefix(while)\
{\listtext	\uc0\u8259 	}suffix\
{\listtext	\uc0\u8259 	}allSatisfy(where:)\
{\listtext	\uc0\u8259 	}publisher\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	\uc0\u8226 	}You will use each of the above over and over again and you need to understand how to use them all.  Additionally they provide very good practice for using Combine.\
{\listtext	\uc0\u8226 	}Properly used, the above methods obviate the need to ever use for-loop's. (Really, they do, you don't need the for statement, 
\f3\i ever
\f1\i0 ).\
{\listtext	\uc0\u8226 	}map/zip/flatMap are listed first and in that order for a reason, these three have huge applicability in almost every generic you will every write.  You should begin to understand the theory here by practicing on Sequences.\
{\listtext	\uc0\u8226 	}If you find yourself doing a sequence of maps, compose the mapping functions together and use a single map instead\
{\listtext	\uc0\u8226 	}Understand how Combine and Sequence are alike and how they are different.\
{\listtext	\uc0\u8226 	}This is critical - you should NEVER construct an array using the reduce method.   Doing so is O(n^2) when there are O(n) options available.\
{\listtext	\uc0\u8226 	}Avoid the use of forEach wherever possible because it returns void. The most common case where it can't be avoided is walking over collections of UIKit objects to change their state.  The one place you might make an exception is where you have a mutating method on a struct.\
{\listtext	\uc0\u8226 	}Any place that you are building up a Collection with a series of append statements, you should look to do that with a static Collection. Due to the fact that Collections in swift are value types, doing it with append (unless you are very careful) ends up requiring quadratic time.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \
Control Flow\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0
\f1\b0\fs28 \cf0 {\listtext	\uc0\u8226 	}Look at everywhere you currently use for-loop constructs and try to visualize it as a chain of map, reduce, filter, zip, flatMap, compactMap, first(where:), contains(where:), shuffled etc.   Any place that you declare an Array or Dictionary as a var and then immediately follow the declaration with a for-loop that fills the var, you should be using the higher order functions.  The key is to think of the higher order functions on Sequence as specializations of a for-loop.\
{\listtext	\uc0\u8226 	}Prefer guard / guard-let to if / if-let wherever possible.   If you find that you have an if block that covers most of your function, you really want to use a guard construct.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \
Generics\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0
\f1\b0\fs28 \cf0 {\listtext	\uc0\u8226 	}Understand the generic parts of the type system.  All of the higher order functions are about working on generic types.  When that really sinks in, you'll wonder how you ever got along without real, reified generics.\
{\listtext	\uc0\u8226 	}Specifically, understand how and why Optional, Result and various Combine Publisher types are generic enums and structs.\
{\listtext	\uc0\u8226 	}Take a look at Swift 5.1's property wrappers to gain a better understanding of generics. They will change your life.\
{\listtext	\uc0\u8226 	}Learn about KeyPaths.  Again, they will change your life and help you write better generic code\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \
Higher Order Functions\

\f1\b0\fs28 I find that many ObjC programmers think that the higher order functions apply only to Array (or if they think about it, Sequence).  This is largely because the only generic type other than Array that they are familiar with is Optional.  And with Optional they already have, in the nil keyword, a mental model that when coupled with Xcode's suggestions when writing optional-chaining code, will suffice for many uses.  This causes them to lose sight of Optional as a generic enum and creates confusion when they are subsequently faced with map/zip/flatMap on other generics.  \
\
Accordingly, you should work to:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls19\ilvl0\cf0 {\listtext	\uc0\u8226 	}Understand and be aware of the use of higher order functions on Optional and Result as well as on Sequence. \
{\listtext	\uc0\u8226 	}Specifically study why map, zip and flatMap apply to Optional and Result and are not just methods on Sequence conformant types like Array and Range.\
{\listtext	\uc0\u8226 	}On Result you need to add an understanding of mapError, flatMapError (and how one would write a zipError) and why those functions exist.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Doing this will help you really understand how to use Combine.\

\f0\b\fs36 \
Optional
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0\cf0 {\listtext	\uc0\u8226 	}Look at the source code for optional and understand that it is a generic enum and why that is\
{\listtext	\uc0\u8226 	}Avoid using optionals without a good reason - doing this removes the need to check for X == nil everywhere and erases a lot of code. \
{\listtext	\uc0\u8226 	}Avoid using the nil keyword in your code and use .none instead.  I've observed that the use of nil causes people with a background in ObjC to be confused about the Optional type.  In ObjC nil == nil everywhere - it's just an alias for 0x0. Propagating nil in this sense from ObjC into Swift was an unfortunate though understandable decision in that it makes it seem as if nil is in some sense a special object where in fact it is almost always aliasing .none.   In Swift, 
\f3\i Optional<Bool>.none
\f1\i0  is not the same value as 
\f3\i Optional<Int>.none
\f1\i0  is not the same value as 
\f3\i Optional<Optional<Int>>.none
\f1\i0 .  \
{\listtext	\uc0\u8226 	}Good practice is to get out of the habit of thinking of nil as a special value and instead use the actual value you mean: 
\f3\i .none
\f1\i0 .\
{\listtext	\uc0\u8226 	}Don't declare variables as Optional simply to avoid having to initialize them.\
{\listtext	\uc0\u8226 	}Corollary to this: don\'92t create an object until you have all the values necessary to do so, then create it with the required values. Curried initializers are good for situations where you accumulate the initialization values gradually.  \
{\listtext	\uc0\u8226 	}Sometimes (like in UIViews loaded from storyboards) it is not possible to avoid optionality due to Apple mandating initialization of an optional happening after allocation.  This case is a particularly good use of implicit rather than explicit optionality.\
{\listtext	\uc0\u8226 	}When you do use optionals, try to remove the optionality as soon as possible, I.e. if you find yourself repeatedly using optional chaining on a variable, you should see about removing the optionality sooner.  This is especially true of the use [weak self] and self?.  \
{\listtext	\uc0\u8226 	}Related to the previous statement: best practice is to use a guard let self = self construct at the top of [weak self] closures.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\uc0\u8226 	}Understand that optional chaining using ? is actually just syntactic sugar over Optional.flatMap.  You should work on understanding why that is until it seems intuitive.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Result
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	\uc0\u8226 	}Understand why result has two different types of map and flatMap (and zip, were we to implement it)\
{\listtext	\uc0\u8226 	}Function chaining is an incredibly valuable technique.  Anywhere in ObjC where you would return an error value to indicate failure, you should try to use Result to chain subsequent calls in a manner similar to the use of Optional.  \
{\listtext	\uc0\u8226 	}Frequently you can also dispense with throwing in your APIs and return Result instead.  Then you can let the Result propagate the error you would otherwise have to catch.  \
{\listtext	\uc0\u8226 	}You will still have to perform a do/try/catch at the end where you call get, but it vastly simplifies your API's to propagate errors this way.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls23\ilvl0\cf0 {\listtext	\uc0\u8226 	}Calls which invoke callback closures should instead return a Swift 5 Result object and .success should never be nil. Even better, they should return a SwiftNIO EventLoopFuture. Conceivably success could return Void as its associated value but that should not be the standard behavior.\
	
\f0\b\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Functions and Closures\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0
\f1\b0\fs28 \cf0 {\listtext	\uc0\u8226 	}Don't do unnecessary variable redeclaration in closures, use $0 $1, etc wherever possible.  \
{\listtext	\uc0\u8226 	}The main case where you will want to redeclare is when you are using a higher order function inside of a closure passed to another higher order function.  But if you find yourself doing that you probably want to be flatMapping it anyway.\
{\listtext	\uc0\u8226 	}Always try to use trailing closure syntax when possible.  Putting parens around your closures is considered unhygienic EXCEPT where multiple closures are being passed into a single function.  And in that circumstance you may want to curry the called function so that you can still use trailing closure syntax.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls25\ilvl0\cf0 {\listtext	\uc0\u8226 	}Use a guideline of a maximum of 5 lines per function/closure.  This is not always possible with Swift bc it lacks pattern matching as powerful as some other languages, but it is a very handy standard to say you should look at functions that get longer than 5 lines with a lot of skepticism and consider splitting the function into smaller named pieces.\
{\listtext	\uc0\u8226 	}Combining small functions with the preference for guard/guard-let and the recommendation above to prefer ternaries over if's means that you will find that your code will have _very_ few if statements.  This is not accidental.\
{\listtext	\uc0\u8226 	}As much as possible try to make closures you pass into a function NOT be @escaping.  Non-escaping functions can be subject by the compiler to several performance optimizations. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \
Combine\

\f1\b0\fs28 I cannot stress how important it will be to understand the Combine framework.  If you thoroughly understand the higher order functions from the section above then Combine can be understood as a Sequence library without the 
\f3\i makeIterator 
\f1\i0 or
\f3\i  next
\f1\i0  functions.  I.e. Publisher is an implementation of the parts of the  Sequence protocol where the individual elements of the sequence are delivered to the higher-order function 
\f3\i asynchronously, one at a time
\f1\i0  rather than being pulled through the function using makeIterator and next.  Seriously, that's all combine is. And that realization completely explains why the Publisher protocol looks so much like Sequence.\
\
I recommend studying the Combine library by starting with PassthruSubject.  This is the standard way to adapt Combine to your imperative-style code, usually in the form of some network access or other asynchronous code.  Once you understand what happens in a map/flatMap/mapError/flatMapError in that setting, replace your PassthruSubject/send() construct with a Defer/Future construct\

\f0\b\fs36 \
Concurrency\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0
\f1\b0\fs28 \cf0 {\listtext	\uc0\u8226 	}Look at SwiftNIO to really understand Promises and Futures.\
{\listtext	\uc0\u8226 	}In particular look at EventLoopPromise and EventLoopFuture.\
{\listtext	\uc0\u8226 	}Also take a look at Channel to understand how to properly write concurrent code\
{\listtext	\uc0\u8226 	}Even though the {\field{\*\fldinst{HYPERLINK "https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782"}}{\fldrslt Concurrency Manifesto}} now seems out of date it is a really good resource for thinking about how Swift is likely to evolve towards a strongly functional Actor model.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \
Handling unsafe code
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls27\ilvl0\cf0 {\listtext	\uc0\u8226 	}\'97\'97\'97\'97\'97\'97.  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \
UIKIt vs SwiftUI
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls28\ilvl0\cf0 {\listtext	\uc0\u8226 	}As of late 2019, you should avoid the use of storyboards and UIKit where ever possible and use SwiftUI.  \
{\listtext	\uc0\u8226 	}Building new code on UIKit is knowingly adding tech debt which will need to be rewritten from scratch in the not too distant future.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs36 Style
\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls29\ilvl0\cf0 {\listtext	\uc0\u8226 	}Examine all of your instance methods to make sure they actually make use of self.  If a method doesn\'92t use self, make it static.\
{\listtext	\uc0\u8226 	}Remove unnecessary uses of the self keyword (which is pretty much all of them outside of a closure).\
{\listtext	\uc0\u8226 	}Incidentally, really understanding why you have to specify the use of self in a closure, rather than just accepting it as a weird syntactic requirement that XCode makes you add, is a marker that you have properly internalized Swift's functional programming core.\
{\listtext	\uc0\u8226 	}Avoid declaring types of variables.  Let type inference do its job, you almost never need to declare types on the left hand side of an initialization.  \
{\listtext	\uc0\u8226 	}If you need to read a type, let Xcode tell you its type.\
{\listtext	\uc0\u8226 	}Sometimes, in long invocation chains, you will need to declare types to help the compiler figure out the types.  This should be done only when the compiler barks at you about it and you should recognize what the barking means.\
{\listtext	\uc0\u8226 	}Never use constructs like aBool == true or aBool == false, just use aBool or !aBool instead\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs34 Future Developments
\f1\b0\fs28 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls30\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f0\b Memory Semantics
\f1\b0 : Library writers will need to understand the memory semantics coming soon, Specifically you need to know when 
\f3\i move
\f1\i0 , 
\f3\i borrow
\f1\i0 , and 
\f3\i copy
\f1\i0  apply.  {\field{\*\fldinst{HYPERLINK "https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md"}}{\fldrslt https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md}}  Basically this is what is needed to make Swift fast enough to be a systems programming language to replace C. It's almost completely \strike \strikec0 stolen\strike0\striked0  borrowed from Rust and there's loads of resources out there on the Rust implementation.  Since the model is "opt-in" on top of the conservative model Swift has always had under ARC, programmers will have to be aware of these things in order to maximize performance of their code.\
{\listtext	\uc0\u8226 	}
\f0\b ABI Stability -> Module Stability -> Binary compatibility
\f1\b0 :  THIS: https://gankra.github.io/blah/swift-abi/ is absolutely the best explanation I have seen of why all this is important.  People writing libraries need to be aware of every detail in it because they will eventually want to implement their own sort of stability. You should also be aware of: {\field{\*\fldinst{HYPERLINK "https://swift.org/blog/abi-stability-and-more/"}}{\fldrslt https://swift.org/blog/abi-stability-and-more/}} this post as the best explanation of the future direction.  And of course the official manifesto itself: {\field{\*\fldinst{HYPERLINK "https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md"}}{\fldrslt https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md}}\
{\listtext	\uc0\u8226 	}
\f0\b Concurrency
\f1\b0 : Swift lacks a good concurrency model.  This keeps it from being a complete system programming language and as this is a core goal of the language we can assume that this is being actively worked on by the core team.  We can also assume that the new memory semantics will be the basis on which a new concurrency model is implemented.  There's a lot to think about here.  Here are some data points:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls30\ilvl1\cf0 {\listtext	\uc0\u8259 	}the concurrency manifesto that Latner and Groff were writing: {\field{\*\fldinst{HYPERLINK "https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782"}}{\fldrslt https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782}} seems to have been abandoned.  There have been no steps to implementing it taken in Swift 5 and no changes to the document in a long time. It specifies the addition of Async/Await and an Actor model in the language.  \
{\listtext	\uc0\u8259 	}there was also a concrete proposal for Async/Await: {\field{\*\fldinst{HYPERLINK "https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619"}}{\fldrslt https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619}} by the same authors.  It was even tenatively scheduled as a Swift Evolution proposal (i.e. the title of the doc is SE-XXXX).  Again, no steps toward implementation in master seem to have been taken.\
{\listtext	\uc0\u8259 	}Apple has been completely silent about open sourcing the Combine framework which has led to numerous open source projects trying to implement an identical solution for use on non-Apple platforms.  The silence and failure to include such obviously important APIs in either the Std Lib or in \
{\listtext	\uc0\u8259 	}There has been no roadmap for Swift 6.0 published.\
{\listtext	\uc0\u8259 	}SwiftNIO is all about concurrency and is built using industry standard techniques.  It is very reasonable to presume that support for its techniques will work its way into actual language syntactic support.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b\fs34 Interesting Links on Advanced Topics\

\f1\b0\fs28 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls31\ilvl0\cf0 {\listtext	\uc0\u8226 	}A whole series on Higher Kinded types\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls31\ilvl1\cf0 {\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://medium.com/@JLHLonline/superpowered-sequences-a009ccc1ae43"}}{\fldrslt Super powered sequences}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://medium.com/@JLHLonline/a-world-beyond-swift-maps-f73397d4504"}}{\fldrslt Beyond Swift Maps}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://medium.com/@JLHLonline/monad-magic-d355a761e294"}}{\fldrslt Monad Magic}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://medium.com/@JLHLonline/a-monad-menagerie-15e5b96d9ca7"}}{\fldrslt Monad Menagerie}}\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls32\ilvl0\cf0 {\listtext	\uc0\u8226 	}The Monad and HKT explanation that finally did made sense of things for me.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls32\ilvl1\cf0 {\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://broomburgo.github.io/fun-ios/post/why-monads/"}}{\fldrslt Monoids to Monads}}\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls32\ilvl0\cf0 {\listtext	\uc0\u8226 	}Pointfree's free episodes:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls32\ilvl1\cf0 {\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep1-functions"}}{\fldrslt Functions}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep2-side-effects"}}{\fldrslt Side Effects}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep4-algebraic-data-types"}}{\fldrslt Algebraic Data Types}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep10-a-tale-of-two-flat-maps"}}{\fldrslt A Tale of Two Flat-Maps}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep25-the-many-faces-of-zip-part-3"}}{\fldrslt The Many Faces of Zip: Part 3}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep65-swiftui-and-state-management-part-1"}}{\fldrslt SwiftUI and State Management: Part 1}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep66-swiftui-and-state-management-part-2"}}{\fldrslt SwiftUI and State Management: Part 2}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep67-swiftui-and-state-management-part-3"}}{\fldrslt SwiftUI and State Management: Part 3}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep80-the-combine-framework-and-effects-part-1"}}{\fldrslt The Combine Framework and Effects: Part 1}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.pointfree.co/episodes/ep81-the-combine-framework-and-effects-part-2"}}{\fldrslt The Combine Framework and Effects: Part 2}}\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls32\ilvl0\cf0 {\listtext	\uc0\u8226 	}Interfacing with unsafe code\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls32\ilvl1\cf0 {\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://www.mikeash.com/pyblog/friday-qa-2017-08-11-swiftunmanaged.html"}}{\fldrslt Unmanaged memory}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "http://technology.meronapps.com/2016/09/27/swift-3-0-unsafe-world-2/"}}{\fldrslt UnsafePointers}}\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls32\ilvl0\cf0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.rightpoint.com/rplabs/switch-method-dispatch-table"}}{\fldrslt Method Dispatch}}\
{\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://medium.com/@vhart/protocols-generics-and-existential-containers-wait-what-e2e698262ab1"}}{\fldrslt Witnesses}}\
{\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.cocoawithlove.com/blog/2016/05/19/random-numbers.html"}}{\fldrslt Random Number Algorithms}}\
{\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.uraimo.com/2016/05/05/recursive-tail-calls-and-trampolines-in-swift/"}}{\fldrslt Trampolines as a means of coping with really deep recusion}}\
{\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.mikeash.com/pyblog/objc_msgsends-new-prototype.html"}}{\fldrslt The new objc_msgSend}}\
{\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.mikeash.com/pyblog/friday-qa-2017-12-08-type-erasure-in-swift.html"}}{\fldrslt The meaning of Type Erasure}}\
{\listtext	\uc0\u8226 	}Helpful SwiftUI Links\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls32\ilvl1\cf0 {\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://swiftwithmajid.com"}}{\fldrslt https://swiftwithmajid.com\
}}\ls32\ilvl1{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://swiftui-lab.com"}}{\fldrslt https://swiftui-lab.com}}\
{\listtext	\uc0\u8259 	}{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/tutorials/swiftui/tutorials"}}{\fldrslt https://developer.apple.com/tutorials/swiftui/tutorials}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\
}